[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "genflow"
version = "0.1.0"
description = "AI Agent Flow Engine"
authors = [
    {name = "GenFlow Team", email = "team@genflow.dev"},
]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
dependencies = [
    # Core Dependencies
    "python-dotenv>=1.0.1",
    "pydantic>=2.6.3",
    "httpx>=0.27.0",
    "requests>=2.31.0",
    "werkzeug>=3.0.1",
    "click>=8.1.7",
    "cryptography>=42.0.5",
    "loguru>=0.7.2",

    # Framework
    "fastapi>=0.110.0",
    "uvicorn>=0.27.1",
    "sse-starlette>=1.6.5",
    "flask>=3.0.2",
    "flask-sqlalchemy>=3.1.1",
    "flask-migrate>=4.0.5",
    "flask-login>=0.6.3",
    "flask-jwt-extended>=4.6.0",
    "flask-cors>=4.0.0",
    "gunicorn>=21.2.0",
    "markupsafe>=2.1.5",
    "jinja2>=3.1.3",
    "itsdangerous>=2.1.2",
    "mako>=1.3.2",
    "pyjwt>=2.8.0",
    "sniffio>=1.3.1",

    # Database & Storage
    "sqlalchemy>=2.0.28",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.3",
    "asyncpg>=0.29.0",

    # AI & Language Models
    "openai>=1.12.0",
    "transformers>=4.38.2",
    "tiktoken>=0.6.0",

    # LangChain Ecosystem
    "langchain-community>=0.0.27",
    "langchain-experimental>=0.0.52",
    "langchain-openai>=0.0.8",
    "langchain-deepseek>=0.1.2",
    "langgraph>=0.0.27",
    "litellm>=1.30.7",

    # Task Management & Agents
    "crewai>=0.19.0",
    "instructor>=0.6.4",
    "celery>=5.3.6",

    # NLP & Text Processing
    "nltk>=3.8.1",
    "readabilipy>=0.3.0",

    # Data Processing
    "pandas>=2.2.1",
    "numpy>=1.26.4",
    "yfinance>=0.2.37",

    # Web & Scraping
    "browser-use>=0.1.0",
    "beautifulsoup4>=4.12.3",
    "selenium>=4.18.1",

    # Telemetry & Monitoring
    "opentelemetry-api>=1.23.0",
    "opentelemetry-sdk>=1.23.0",
    "opentelemetry-semantic-conventions>=0.44b0",
    "opentelemetry-exporter-otlp>=1.23.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.23.0",
    "opentelemetry-exporter-otlp-proto-common>=1.23.0",
    "opentelemetry-proto>=1.23.0",
    "grpcio>=1.62.1",
    "protobuf>=4.25.3",
    "googleapis-common-protos>=1.62.0",

    # ChromaDB Dependencies
    "chromadb>=0.4.24",
    "onnxruntime>=1.17.1",
    "tenacity>=8.2.3",
    "overrides>=7.7.0",
    "deprecated>=1.2.14",
    "wrapt>=1.16.0",

    # Utilities
    "tqdm>=4.66.2",
    "pyyaml>=6.0.1",
    "json-repair>=0.9.2",
    "typing-extensions>=4.10.0",
    "annotated-types>=0.6.0",
    "pydantic-core>=2.16.3",
    "idna>=3.6",
    "tokenizers>=0.15.2",
    "importlib-metadata>=7.0.1",
    "appdirs>=1.4.4",
    "blinker>=1.7.0",
    "markdown>=3.5.2",
    "email_validator>=2.1.1",
    "markdownify>=0.11.6",
    "aiofiles>=23.2.1",
]

[project.optional-dependencies]
dev = [
    "black>=24.2.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.0",
    "pre-commit>=3.6.2",
    "faker>=24.2.0",  # 用于生成测试数据
    "locust>=2.24.0", # 用于性能测试
]

backend = [
    "fastapi>=0.110.0",
    "uvicorn>=0.27.1",
    "pydantic>=2.6.3",
    "pydantic-settings>=2.2.1",
    "sqlalchemy>=2.0.28",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.9",
    "fastapi-cache2>=0.2.1",
    "redis>=5.0.3",
    "aiofiles>=23.2.1",
    "python-dotenv>=1.0.1",
    "loguru>=0.7.2",
    "httpx>=0.27.0",
]

all = [
    "pre-commit>=3.6.2",
]

[project.scripts]
genflow = "run:run"

[tool.hatch.build.targets.wheel]
packages = ["src", "app"]

[tool.setuptools]
py-modules = []

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
(
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
lines_after_imports = 2
line_length = 100
include_trailing_comma = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']

[tool.mypy]
python_version = "3.12"
exclude = ["migrations/"]
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fastapi_cache.*",
    "redis.*"
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [".git", "__pycache__", ".mypy_cache", ".pytest_cache", "migrations"]
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "I",   # isort
    "RUF", # ruff-specific rules
]
lint.ignore = [
    "B904",
    "B006",
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.coverage.report]
fail_under = 20
exclude_also = [
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\.",
]

[tool.coverage.run]
omit = ['*tests/*']
